#!/usr/bin/env python3
"""
Consolidate Code Comprehension Reports

This script reads all code comprehension report files from the codereport/ and 
docs/reports/srcreports/ directories and consolidates them into a single text file.
"""

import os
import glob
from pathlib import Path

def get_all_report_files():
    """Get all report files from both directories."""
    files = []
    
    # Files from codereport/ directory
    codereport_patterns = [
        "codereport/code_comprehension_report_PART_*.md",
        "codereport/code_comprehension_summary.md"
    ]
    
    # Files from docs/reports/srcreports/ directory  
    srcreports_patterns = [
        "docs/reports/srcreports/code_comprehension_report_PART_*.md",
        "docs/reports/srcreports/code_comprehension_summary.md",
        "docs/reports/srcreports/comprehension_report_fava_*.md"
    ]
    
    # Collect all files matching the patterns
    all_patterns = codereport_patterns + srcreports_patterns
    
    for pattern in all_patterns:
        matched_files = glob.glob(pattern)
        files.extend(matched_files)
    
    # Remove duplicates and sort
    files = sorted(list(set(files)))
    
    return files

def read_file_content(file_path):
    """Read the content of a file, handling encoding issues."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return f.read()
    except UnicodeDecodeError:
        try:
            with open(file_path, 'r', encoding='latin-1') as f:
                return f.read()
        except Exception as e:
            return f"Error reading file: {str(e)}"
    except Exception as e:
        return f"Error reading file: {str(e)}"

def consolidate_reports():
    """Main function to consolidate all reports into a single file."""
    
    # Get all report files
    report_files = get_all_report_files()
    
    if not report_files:
        print("No report files found!")
        return
    
    # Output file path
    output_file = "consolidated_code_comprehension_reports.txt"
    
    print(f"Found {len(report_files)} report files to consolidate...")
    
    try:
        with open(output_file, 'w', encoding='utf-8') as outfile:
            # Write header
            outfile.write("CONSOLIDATED CODE COMPREHENSION REPORTS\n")
            outfile.write("=" * 50 + "\n\n")
            outfile.write(f"This file contains {len(report_files)} consolidated reports.\n")
            outfile.write(f"Generated by: {os.path.basename(__file__)}\n\n")
            outfile.write("=" * 50 + "\n\n")
            
            # Process each file
            for i, file_path in enumerate(report_files, 1):
                print(f"Processing {i}/{len(report_files)}: {file_path}")
                
                # Get file info
                file_name = os.path.basename(file_path)
                abs_path = os.path.abspath(file_path)
                
                # Write file header
                outfile.write(f"FILE: {file_name}\n")
                outfile.write(f"PATH: {file_path}\n")
                outfile.write(f"ABSOLUTE PATH: {abs_path}\n")
                outfile.write("-" * 80 + "\n\n")
                
                # Read and write file content
                content = read_file_content(file_path)
                outfile.write(content)
                
                # Add separator (except for last file)
                if i < len(report_files):
                    outfile.write("\n\n" + "=" * 80 + "\n\n")
            
            # Write footer
            outfile.write(f"\n\nEND OF CONSOLIDATED REPORTS\n")
            outfile.write(f"Total files processed: {len(report_files)}\n")
    
    except Exception as e:
        print(f"Error writing output file: {str(e)}")
        return
    
    print(f"\nConsolidation complete!")
    print(f"Output file: {output_file}")
    print(f"Total files processed: {len(report_files)}")
    
    # Show file listing
    print(f"\nFiles included in consolidation:")
    for file_path in report_files:
        print(f"  - {file_path}")

if __name__ == "__main__":
    consolidate_reports() 